You are using the plain ModelCheckpoint callback. Consider using LitModelCheckpoint which with seamless uploading to Model registry.
GPU available: False, used: False
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\loggers\wandb.py:397: There is a wandb run already in progress and newly created instances of `WandbLogger` will reuse this run. If this is not desired, call `wandb.finish()` before instantiating `WandbLogger`.

  | Name      | Type             | Params | Mode
-------------------------------------------------------
0 | model     | CNN              | 3.2 M  | train
1 | criterion | CrossEntropyLoss | 0      | train
-------------------------------------------------------
3.2 M     Trainable params
0         Non-trainable params
3.2 M     Total params
12.928    Total estimated model params size (MB)
14        Modules in train mode
0         Modules in eval mode
Sanity Checking: |                                                                                   | 0/? [00:00<?, ?it/s]
C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\trainer\connectors\data_connector.py:420: Consider setting `persistent_workers=True` in 'val_dataloader' to speed up the dataloader worker initialization.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\spawn.py", line 125, in _main
    prepare(preparation_data)
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "C:\Users\praha\miniconda3\envs\DS\lib\runpy.py", line 289, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "C:\Users\praha\miniconda3\envs\DS\lib\runpy.py", line 96, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "C:\Users\praha\miniconda3\envs\DS\lib\runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "C:\Users\praha\Documents\IIT madras\Acads\sem 10\introtoDL\A02\da6401-assignment-2\partA\train.py", line 83, in <module>
    trainer.fit(model, train_loader, val_loader)
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 561, in fit
    call._call_and_handle_interrupt(
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\trainer\call.py", line 48, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 599, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 1012, in _run
    results = self._run_stage()
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 1054, in _run_stage
    self._run_sanity_check()
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 1083, in _run_sanity_check
    val_loop.run()
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\loops\utilities.py", line 179, in _decorator
    return loop_run(self, *args, **kwargs)
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\loops\evaluation_loop.py", line 123, in run
    self.reset()
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\loops\evaluation_loop.py", line 259, in reset
    iter(data_fetcher)  # creates the iterator inside the fetcher
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\loops\fetchers.py", line 105, in __iter__
    super().__iter__()
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\loops\fetchers.py", line 52, in __iter__
    self.iterator = iter(self.combined_loader)
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\utilities\combined_loader.py", line 351, in __iter__
    iter(iterator)
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\utilities\combined_loader.py", line 155, in __iter__
    self._load_current_iterator()
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\pytorch_lightning\utilities\combined_loader.py", line 173, in _load_current_iterator
    self.iterators = [iter(self.iterables[self._iterator_idx])]
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\torch\utils\data\dataloader.py", line 491, in __iter__
    return self._get_iterator()
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\torch\utils\data\dataloader.py", line 422, in _get_iterator
    return _MultiProcessingDataLoaderIter(self)
  File "C:\Users\praha\miniconda3\envs\DS\lib\site-packages\torch\utils\data\dataloader.py", line 1146, in __init__
    w.start()
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\context.py", line 224, in _Popen
    return _default_context.get_context().Process._Popen(process_obj)
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\context.py", line 336, in _Popen
    return Popen(process_obj)
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\popen_spawn_win32.py", line 45, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "C:\Users\praha\miniconda3\envs\DS\lib\multiprocessing\spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError:
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
